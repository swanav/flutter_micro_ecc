// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, camel_case_types, unused_field, unused_element

import 'dart:ffi' as ffi;

class MicroEcc {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MicroEcc(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MicroEcc.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  uECC_Curve uECC_secp160r1() {
    return _uECC_secp160r1();
  }

  late final _uECC_secp160r1Ptr =
      _lookup<ffi.NativeFunction<uECC_Curve Function()>>('uECC_secp160r1');
  late final _uECC_secp160r1 =
      _uECC_secp160r1Ptr.asFunction<uECC_Curve Function()>();

  uECC_Curve uECC_secp192r1() {
    return _uECC_secp192r1();
  }

  late final _uECC_secp192r1Ptr =
      _lookup<ffi.NativeFunction<uECC_Curve Function()>>('uECC_secp192r1');
  late final _uECC_secp192r1 =
      _uECC_secp192r1Ptr.asFunction<uECC_Curve Function()>();

  uECC_Curve uECC_secp224r1() {
    return _uECC_secp224r1();
  }

  late final _uECC_secp224r1Ptr =
      _lookup<ffi.NativeFunction<uECC_Curve Function()>>('uECC_secp224r1');
  late final _uECC_secp224r1 =
      _uECC_secp224r1Ptr.asFunction<uECC_Curve Function()>();

  uECC_Curve uECC_secp256r1() {
    return _uECC_secp256r1();
  }

  late final _uECC_secp256r1Ptr =
      _lookup<ffi.NativeFunction<uECC_Curve Function()>>('uECC_secp256r1');
  late final _uECC_secp256r1 =
      _uECC_secp256r1Ptr.asFunction<uECC_Curve Function()>();

  uECC_Curve uECC_secp256k1() {
    return _uECC_secp256k1();
  }

  late final _uECC_secp256k1Ptr =
      _lookup<ffi.NativeFunction<uECC_Curve Function()>>('uECC_secp256k1');
  late final _uECC_secp256k1 =
      _uECC_secp256k1Ptr.asFunction<uECC_Curve Function()>();

  void uECC_set_rng(
    uECC_RNG_Function rng_function,
  ) {
    return _uECC_set_rng(
      rng_function,
    );
  }

  late final _uECC_set_rngPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uECC_RNG_Function)>>(
          'uECC_set_rng');
  late final _uECC_set_rng =
      _uECC_set_rngPtr.asFunction<void Function(uECC_RNG_Function)>();

  uECC_RNG_Function uECC_get_rng() {
    return _uECC_get_rng();
  }

  late final _uECC_get_rngPtr =
      _lookup<ffi.NativeFunction<uECC_RNG_Function Function()>>('uECC_get_rng');
  late final _uECC_get_rng =
      _uECC_get_rngPtr.asFunction<uECC_RNG_Function Function()>();

  int uECC_curve_private_key_size(
    uECC_Curve curve,
  ) {
    return _uECC_curve_private_key_size(
      curve,
    );
  }

  late final _uECC_curve_private_key_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(uECC_Curve)>>(
          'uECC_curve_private_key_size');
  late final _uECC_curve_private_key_size =
      _uECC_curve_private_key_sizePtr.asFunction<int Function(uECC_Curve)>();

  int uECC_curve_public_key_size(
    uECC_Curve curve,
  ) {
    return _uECC_curve_public_key_size(
      curve,
    );
  }

  late final _uECC_curve_public_key_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(uECC_Curve)>>(
          'uECC_curve_public_key_size');
  late final _uECC_curve_public_key_size =
      _uECC_curve_public_key_sizePtr.asFunction<int Function(uECC_Curve)>();

  int uECC_make_key(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> private_key,
    uECC_Curve curve,
  ) {
    return _uECC_make_key(
      public_key,
      private_key,
      curve,
    );
  }

  late final _uECC_make_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              uECC_Curve)>>('uECC_make_key');
  late final _uECC_make_key = _uECC_make_keyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  int uECC_shared_secret(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> secret,
    uECC_Curve curve,
  ) {
    return _uECC_shared_secret(
      public_key,
      private_key,
      secret,
      curve,
    );
  }

  late final _uECC_shared_secretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>, uECC_Curve)>>('uECC_shared_secret');
  late final _uECC_shared_secret = _uECC_shared_secretPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  void uECC_compress(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> compressed,
    uECC_Curve curve,
  ) {
    return _uECC_compress(
      public_key,
      compressed,
      curve,
    );
  }

  late final _uECC_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              uECC_Curve)>>('uECC_compress');
  late final _uECC_compress = _uECC_compressPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  void uECC_decompress(
    ffi.Pointer<ffi.Uint8> compressed,
    ffi.Pointer<ffi.Uint8> public_key,
    uECC_Curve curve,
  ) {
    return _uECC_decompress(
      compressed,
      public_key,
      curve,
    );
  }

  late final _uECC_decompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              uECC_Curve)>>('uECC_decompress');
  late final _uECC_decompress = _uECC_decompressPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  int uECC_valid_public_key(
    ffi.Pointer<ffi.Uint8> public_key,
    uECC_Curve curve,
  ) {
    return _uECC_valid_public_key(
      public_key,
      curve,
    );
  }

  late final _uECC_valid_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, uECC_Curve)>>('uECC_valid_public_key');
  late final _uECC_valid_public_key = _uECC_valid_public_keyPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  int uECC_compute_public_key(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> public_key,
    uECC_Curve curve,
  ) {
    return _uECC_compute_public_key(
      private_key,
      public_key,
      curve,
    );
  }

  late final _uECC_compute_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              uECC_Curve)>>('uECC_compute_public_key');
  late final _uECC_compute_public_key = _uECC_compute_public_keyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  int uECC_sign(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> message_hash,
    int hash_size,
    ffi.Pointer<ffi.Uint8> signature,
    uECC_Curve curve,
  ) {
    return _uECC_sign(
      private_key,
      message_hash,
      hash_size,
      signature,
      curve,
    );
  }

  late final _uECC_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Pointer<ffi.Uint8>, uECC_Curve)>>('uECC_sign');
  late final _uECC_sign = _uECC_signPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  int uECC_sign_deterministic(
    ffi.Pointer<ffi.Uint8> private_key,
    ffi.Pointer<ffi.Uint8> message_hash,
    int hash_size,
    ffi.Pointer<uECC_HashContext> hash_context,
    ffi.Pointer<ffi.Uint8> signature,
    uECC_Curve curve,
  ) {
    return _uECC_sign_deterministic(
      private_key,
      message_hash,
      hash_size,
      hash_context,
      signature,
      curve,
    );
  }

  late final _uECC_sign_deterministicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<uECC_HashContext>,
              ffi.Pointer<ffi.Uint8>,
              uECC_Curve)>>('uECC_sign_deterministic');
  late final _uECC_sign_deterministic = _uECC_sign_deterministicPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<uECC_HashContext>, ffi.Pointer<ffi.Uint8>, uECC_Curve)>();

  int uECC_verify(
    ffi.Pointer<ffi.Uint8> public_key,
    ffi.Pointer<ffi.Uint8> message_hash,
    int hash_size,
    ffi.Pointer<ffi.Uint8> signature,
    uECC_Curve curve,
  ) {
    return _uECC_verify(
      public_key,
      message_hash,
      hash_size,
      signature,
      curve,
    );
  }

  late final _uECC_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
              ffi.Uint32, ffi.Pointer<ffi.Uint8>, uECC_Curve)>>('uECC_verify');
  late final _uECC_verify = _uECC_verifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>, uECC_Curve)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> __mbstate8;

  @ffi.Int64()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class uECC_Curve_t extends ffi.Opaque {}

typedef uECC_Curve = ffi.Pointer<uECC_Curve_t>;
typedef uECC_RNG_Function = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>;

class uECC_HashContext extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<uECC_HashContext>)>>
      init_hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<uECC_HashContext>,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>> update_hash;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<uECC_HashContext>, ffi.Pointer<ffi.Uint8>)>>
      finish_hash;

  @ffi.Uint32()
  external int block_size;

  @ffi.Uint32()
  external int result_size;

  external ffi.Pointer<ffi.Uint8> tmp;
}

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int uECC_arch_other = 0;

const int uECC_x86 = 1;

const int uECC_x86_64 = 2;

const int uECC_arm = 3;

const int uECC_arm_thumb = 4;

const int uECC_arm_thumb2 = 5;

const int uECC_arm64 = 6;

const int uECC_avr = 7;

const int uECC_OPTIMIZATION_LEVEL = 2;

const int uECC_SQUARE_FUNC = 0;

const int uECC_VLI_NATIVE_LITTLE_ENDIAN = 0;

const int uECC_SUPPORTS_secp160r1 = 1;

const int uECC_SUPPORTS_secp192r1 = 1;

const int uECC_SUPPORTS_secp224r1 = 1;

const int uECC_SUPPORTS_secp256r1 = 1;

const int uECC_SUPPORTS_secp256k1 = 1;

const int uECC_SUPPORT_COMPRESSED_POINT = 1;
